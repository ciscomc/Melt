/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package melt.View;

import java.awt.CardLayout;
import java.awt.Color;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import melt.Controller;
import melt.Model.Mcq;
import melt.Model.Question;
import melt.Model.Section;
import melt.Model.Student;
import melt.Model.Subsection;
import melt.Model.Test;
import melt.Model.TestBank;
import melt.View.marker.MarkerPanel;

/**
 *
 * @author mbaxkfx2
 */
public class StudentPanel extends javax.swing.JPanel {

    /**
     * Creates new form StudentPanel
     */
    private Controller controller;
    private SingleSectionPanel sectionPanel;
    private int sectionIndex = 1;
    private double score = 0;
    private Test currentTest;
    private JPanel contentPane;
    private final ClockDisplay clock;
    private volatile boolean clockRunning = false;
    private String studentName;
    private Student newStudent;
    private final Thread timerThread;
    private boolean testTaken = false;

    StudentPanel(JPanel panel, Controller controller) {

        initComponents();
        this.controller = controller;
        this.contentPane = panel;
        clock = new ClockDisplay();
        timerThread = new TimerThread();
        
        //To change body of generated methods, choose Tools | Templates.
    }

    public String getStudentName() {
        return studentName;
    }

    public void setStudentName(String studentName) {
        this.studentName = studentName;
    }

    public void setTest(Test selectedTest) {
        this.currentTest = selectedTest;
    }

    public void startTest() {

        studentName = JOptionPane.showInputDialog(this, "Student name : ");
        if (studentName == null) {
            //JOptionPane.showMessageDialog(sectionPanel, "There are no tests in the database");
            CardLayout cardLayout = (CardLayout) contentPane.getLayout();
            cardLayout.show(contentPane, "welcomePanel");
            return;
        }
        this.nextSectionButton.setText("Next Section");


        if (currentTest == null || currentTest.getSections() == null) {
            JOptionPane.showMessageDialog(sectionPanel, "There are no tests in the database");
            CardLayout cardLayout = (CardLayout) contentPane.getLayout();
            cardLayout.show(contentPane, "welcomePanel");
            

        } else {

            //timerThread.start();
            newStudent = controller.addStudent(studentName, currentTest);
            //Update marker panel
            MarkerPanel markerPanel = (MarkerPanel) contentPane.getComponent(3);
            markerPanel.updateStudentTree();
            currentTest = newStudent.getSelectedTest();
            Section firstSection = currentTest.getSectionById(sectionIndex);
            int minutes = (int) firstSection.getTime() % 60;
            int hours = (int) (firstSection.getTime() / 60);

            sectionPanel = new SingleSectionPanel(firstSection);
            clockRunning = true;
            clock.setTime(hours, minutes, 0);
            startSectionClock();
            if (testTaken == false) {
                timerThread.start();
                testTaken = true;
            }

            scrollPane.setViewportView(sectionPanel);
            sectionPanel.showSection();
        }
        
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void startSectionClock() {
        clockRunning = true;

    }

    public void stopClock() {

        clockRunning = false;

    }

    public void resetClock() {
        jlabelTime.setForeground(Color.black);
        clock.setTime(0, 0, 0);
    }

    /**
     *
     */
    private void step() {
        clock.timeTick();
        jlabelTime.setText(clock.getTime());
    }

    class TimerThread extends Thread {

        @Override
        public void run() {

            while (true) {
                if(clockRunning){
                    step();

                String timeRemaining = clock.getTime();

                if (timeRemaining.equals("00:00:00")) {
                    JOptionPane.showMessageDialog(sectionPanel, "Time for section " + sectionPanel.getSectionObject().getName() + " is up, you will now be navigated to the next section.");
                    nextSectionButton.doClick();
                }
                if (timeRemaining.equals("00:00:30")) {
                    jlabelTime.setForeground(Color.red);

                }
                jlabelTime.setVisible(true);
                pause();
                }
                else{
                    this.interrupt();
                }
                
            }
            
        }

        private void pause() {
            try {

                Thread.sleep(1000);
                // pause for 300 milliseconds
            } catch (InterruptedException exc) {
            }
        }
    }

    private void showNextSection() {


        Section firstSection = currentTest.getSectionById(sectionIndex);
        int minutes = (int) firstSection.getTime() % 60;
        int hours = (int) (firstSection.getTime() / 60);
        sectionPanel = new SingleSectionPanel(firstSection);
        resetClock();
        clock.setTime(hours, minutes, 0);
        this.startSectionClock();
        scrollPane.setViewportView(sectionPanel);
        sectionPanel.showSection();
    }

    private void submitTest() {
        sectionPanel.setPanelAnswers();
        newStudent.markMcqQuestions();
        newStudent.markFibqQuestions();
        controller.updateStudentFile();

        JOptionPane.showMessageDialog(sectionPanel, "Marks for Multiple choice : " + this.newStudent.getMcqMark() + "\n" + "Marks for Fill in the blanks : " + this.newStudent.getFibqMark());
        CardLayout cardLayout = (CardLayout) contentPane.getLayout();
        cardLayout.show(contentPane, "welcomePanel");

        //reset test and section index
        sectionIndex = 1;
        currentTest = null;
        newStudent = null;
        sectionPanel.clearAllAnswers();
        sectionPanel.setSectionObject(null);
        this.resetClock();
        this.revalidate();

    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nextSectionButton = new javax.swing.JButton();
        jlabelTime = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();

        nextSectionButton.setText("Submit");
        nextSectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextSectionButtonActionPerformed(evt);
            }
        });

        jlabelTime.setText("Time");

        scrollPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(jlabelTime)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 717, Short.MAX_VALUE)
                .addComponent(nextSectionButton))
            .addComponent(scrollPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextSectionButton)
                    .addComponent(jlabelTime)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nextSectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextSectionButtonActionPerformed
        // TODO add your handling code here:
        this.sectionPanel.setPanelAnswers();
        controller.updateStudentFile();
        sectionIndex++;
        switch (this.nextSectionButton.getText()) {
            case "Next Section":
                if (currentTest.getSectionById(sectionIndex) == null) {//last section ask for submission

                    int choice = JOptionPane.showConfirmDialog(this, "This is the last Section of the test.\nWould you like to submit the test ?", "End of test", JOptionPane.YES_NO_OPTION);
                    //if the answer is yes submit the test
                    if (choice == 0) {
                        //submit the test
                        submitTest();
                        resetClock();
                        stopClock();
                    } else if (choice == 1) {//the answer is no, check timer and if it is zero, inform that the time is up and submit

                        this.nextSectionButton.setText("Submit Test");
                        if (this.clock.getTime().equals("00:00:00")) {
                            JOptionPane.showMessageDialog(this, "The time for the last section is over, the test will now be submitted.");

                            submitTest();
                            resetClock();
                            stopClock();
                        }
                    }


                } else {//not the last section, move to the next

                    showNextSection();

                }
                break;
            case "Submit Test":
                int choice = JOptionPane.showConfirmDialog(this, "This is the last Section of the test.\nWould you like to submit the test ?", "End of test", JOptionPane.YES_NO_OPTION);
                if (choice == 0) {
                    //submit the test
                    submitTest();
                    resetClock();
                    stopClock();
                } else if (choice == 1) {
                    //check if timer is 0, if its 0, submit the test and stop the clock
                    if (this.clock.getTime().equals("00:00:00")) {
                        JOptionPane.showMessageDialog(this, "The time for the last section is over, the test will now be submitted.");

                        submitTest();
                        resetClock();
                        stopClock();
                    }

                }
                break;
        }

    }//GEN-LAST:event_nextSectionButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jlabelTime;
    private javax.swing.JButton nextSectionButton;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
}
