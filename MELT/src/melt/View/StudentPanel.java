/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package melt.View;

import java.awt.CardLayout;
import java.awt.Color;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import melt.Controller;
import melt.Model.Mcq;
import melt.Model.Question;
import melt.Model.Section;
import melt.Model.Student;
import melt.Model.Subsection;
import melt.Model.Test;
import melt.Model.TestBank;
import melt.View.marker.MarkerPanel;

/**
 *
 * @author mbaxkfx2
 */
public class StudentPanel extends javax.swing.JPanel {

    /**
     * Creates new form StudentPanel
     */
    private Controller controller;
    private SingleSectionPanel sectionPanel;
    private int sectionIndex = 1;
    private double score = 0;
    private Test currentTest;
    private JPanel contentPane;
    private final ClockDisplay clock;
    private boolean clockRunning = false;
    private String studentName;
    private Student newStudent;
    //private TimerThread timerThread;

    StudentPanel(JPanel panel, Controller controller) {

        initComponents();
        this.controller = controller;
        this.contentPane = panel;
        clock = new ClockDisplay();

        //To change body of generated methods, choose Tools | Templates.
    }

    public String getStudentName() {
        return studentName;
    }

    public void setStudentName(String studentName) {
        this.studentName = studentName;
    }

    public void setTest(Test selectedTest) {
        this.currentTest = selectedTest;
    }

    public void startTest() {


        
        
        
        studentName = JOptionPane.showInputDialog(this, "Student name : ");



        if (currentTest == null || currentTest.getSections() == null) {
            JOptionPane.showMessageDialog(sectionPanel, "There are no tests in the database");
            CardLayout cardLayout = (CardLayout) contentPane.getLayout();
            cardLayout.show(contentPane, "welcomePanel");
        } else {

            newStudent = controller.addStudent(studentName, currentTest);
            //Update marker panel
            MarkerPanel markerPanel = (MarkerPanel) contentPane.getComponent(3);
            markerPanel.updateStudentTree();
            currentTest = newStudent.getSelectedTest();
            Section firstSection = currentTest.getSectionById(sectionIndex);
            int minutes = (int) firstSection.getTime() % 60;
            int hours = (int) (firstSection.getTime() / 60);
            sectionPanel = new SingleSectionPanel(firstSection);
            
            clock.setTime(hours, minutes, 0);
            this.startSectionClock();
            clockRunning = true;
            scrollPane.setViewportView(sectionPanel);
            sectionPanel.showSection();
        }
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void startSectionClock() {
        clockRunning = true;
        TimerThread timerThread = new TimerThread();
        timerThread.start();
    }

    /**
     *
     */
    private void stop() {
        clockRunning = false;
    }

    /**
     *
     */
    private void step() {
        clock.timeTick();
        jlabelTime.setText(clock.getTime());
    }

    class TimerThread extends Thread {
        @Override
        public void run() {
            while (clockRunning) {
                step();

                String timeRemaining = clock.getTime();
                if (timeRemaining.equals("00:00:00")) {
                    JOptionPane.showMessageDialog(sectionPanel, "Time for section " + sectionPanel.getSectionObject().getName() + " is up, you will now be navigated to the next section." );
                    NextButton.doClick();
                    //this.stop();

                }
                if (timeRemaining.equals("00:00:30")) {
                    jlabelTime.setForeground(Color.red);

                }
                jlabelTime.setVisible(true);
                pause();
            }
        }

        private void pause() {
            try {

                Thread.sleep(1000);
                // pause for 300 milliseconds
            } catch (InterruptedException exc) {
            }
        }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SubmitButton = new javax.swing.JButton();
        jlabelTime = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();

        NextButton.setText("Next");
        NextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextButtonActionPerformed(evt);
            }
        });

        SubmitButton.setText("Submit");
        SubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitButtonActionPerformed(evt);
            }
        });

        jlabelTime.setText("Time");

        scrollPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(jlabelTime)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 626, Short.MAX_VALUE)
                .addComponent(NextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(SubmitButton))
            .addComponent(scrollPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SubmitButton)
                    .addComponent(NextButton)
                    .addComponent(jlabelTime)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void NextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextButtonActionPerformed
        jlabelTime.setForeground(Color.BLACK);
        sectionIndex++;

        if (currentTest.getSectionById(sectionIndex) == null) {
            sectionPanel.setPanelAnswers();
            sectionPanel.clearAllAnswers();
            controller.updateStudentFile();
            JOptionPane.showMessageDialog(sectionPanel, "There are no more sections in the test, the test will now be submitted.");
            SubmitButton.doClick();

        } else {
            sectionPanel.setPanelAnswers();
            controller.updateStudentFile();
            sectionPanel.clearAllAnswers();
            sectionPanel = new SingleSectionPanel(currentTest.getSectionById(sectionIndex));
            scrollPane.setViewportView(sectionPanel);
            sectionPanel.showSection();
            int minutes = (int) currentTest.getSectionById(sectionIndex).getTime() % 60;
            int hours = (int) (currentTest.getSectionById(sectionIndex).getTime() / 60);
            clock.setTime(hours, minutes, 0);
            this.startSectionClock();
            this.revalidate();
        }


    }//GEN-LAST:event_NextButtonActionPerformed

    private void SubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitButtonActionPerformed
        // TODO add your handling code here:
        int choice = JOptionPane.showConfirmDialog(this, "Are you sure you want to submit the test ?","Submit Test",JOptionPane.YES_OPTION);
        System.out.println(choice);
        if (choice == 0) {
            
            newStudent.markMcqQuestions();
            newStudent.markFibqQuestions();
            controller.updateStudentFile();
            
            JOptionPane.showMessageDialog(sectionPanel,"Marks for Multiple choice : " + this.newStudent.getMcqMark() + "\n" + "Marks for Fill in the blanks : " + this.newStudent.getFibqMark());
            CardLayout cardLayout = (CardLayout) contentPane.getLayout();
            cardLayout.show(contentPane, "welcomePanel");
            this.stop();
            //reset test and section index
            sectionIndex = 1;
            currentTest = null;
            newStudent = null;
            sectionPanel = null;
            this.revalidate();
        }
        if(this.clock.getTime().equals("00:00:00")){
            JOptionPane.showMessageDialog(this,"Sorry, time is up, the test will now be submitted");
            newStudent.markMcqQuestions();
            newStudent.markFibqQuestions();
            controller.updateStudentFile();

            JOptionPane.showMessageDialog(sectionPanel,"Marks for Multiple choice : " + this.newStudent.getMcqMark() + "\n" + "Marks for Fill in the blanks : " + this.newStudent.getFibqMark());
            CardLayout cardLayout = (CardLayout) contentPane.getLayout();
            cardLayout.show(contentPane, "welcomePanel");
            this.stop();
            //reset test and section index
            sectionIndex = 1;
            currentTest = null;
            newStudent = null;
            sectionPanel.clearAllAnswers();
            this.revalidate();
        }
    }//GEN-LAST:event_SubmitButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final javax.swing.JButton NextButton = new javax.swing.JButton();
    private javax.swing.JButton SubmitButton;
    private javax.swing.JLabel jlabelTime;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
}
